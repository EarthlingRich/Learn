// Run in https://jscomplete.com/playground/rgs3.1
const MAX_STARS = 9;
const START_SECONDS = 10;

const StarDisplay = (props) => (
  <>
    {utils.range(1, props.count).map(number =>
      <div key={number} className="star" />
    )}
  </>
)

const PlayAgain = (props) => (
  <div className="game-done">
    <div 
      className="message"
      style={{ color: props.gameStatus === 'won' ? 'green' : 'red'}}>
      {props.gameStatus ==='won' ? 'You won! :)' : 'You lost. :(' }
      </div>
    <button onClick={props.onClick}>Play again</button>
  </div>
)

const NumberButton = (props) => (
  <button 
    className="number"
    style={{backgroundColor: colors[props.numberStatus]}}
    onClick={() => props.onClick(props.number, props.numberStatus)}
  >
    {props.number}
  </button>
)

const useGameState = () => {
  const [starCount, setStarCount] = useState(utils.random(1, MAX_STARS))
  const [availableNumbers, setAvailableNumbers] = useState(utils.range(1, MAX_STARS))
  const [selectedNumbers, setSelectedNumbers] = useState([])
  const [remainingSeconds, setRemainingSeconds] = useState(START_SECONDS)
  const [timerId, setTimerId] = useState(null)

  useEffect(() => {
    if(timerId === null) {
      setTimerId(setInterval(() => {
        setRemainingSeconds(remainingSeconds => remainingSeconds - 1)
        if (remainingSeconds === 0)
          clearInterval(timerId)
      }, 1000))
    }
    if (remainingSeconds === 0) {
      clearInterval(timerId)
      setTimerId(null)
    }
  }, [remainingSeconds])

  const gameStatus = availableNumbers.length === 0 ? 'won'
    : remainingSeconds === 0 ? 'lost' : 'active'
  
  const setGameState = (number, numberStatus) => {
    const newSelectedNumbers = numberStatus === 'available' ? selectedNumbers.concat(number) : selectedNumbers.filter(n => n !== number)
    
    if (utils.sum(newSelectedNumbers) !== starCount)
      setSelectedNumbers(newSelectedNumbers)
    else {
      const newAvailableNumber = availableNumbers.filter(n => !newSelectedNumbers.includes(n))
      setAvailableNumbers(newAvailableNumber)
      setSelectedNumbers([])
      setStarCount(utils.randomSumIn(newAvailableNumber, MAX_STARS))
    }
  }
  
  return {
    starCount,
    availableNumbers,
    selectedNumbers,
    remainingSeconds,
    gameStatus,
    setGameState
  }
}

const Game = (props) => {
 const {
   starCount,
   availableNumbers,
   selectedNumbers,
   remainingSeconds,
   setGameState,
   gameStatus
 } = useGameState();
  
  const numberStatus = (number) => {
    const isSelectionInvalid = utils.sum(selectedNumbers) > starCount
    if (!availableNumbers.includes(number))
      return 'used'
    if (selectedNumbers.includes(number))
      return isSelectionInvalid ? 'invalid' : 'selected'
    return 'available'
  }
  
  const onNumberClick = (number, numberStatus) => {
    if (gameStatus !== 'active' || numberStatus == 'used')
      return
    
    setGameState(number, numberStatus)
  }
  
  return (
    <div className="game">
      <div className="help">
        Pick 1 or more numbers that sum to the number of stars
      </div>
      <div className="body">
        <div className="left">
          {gameStatus !== 'active' ? (
            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />
          ) : (
            <StarDisplay count={starCount} />
          )}
          
        </div>
        <div className="right">
          {utils.range(1, MAX_STARS).map(number =>
            <NumberButton 
              key={number}
              number={number}
              numberStatus={numberStatus(number)}
              onClick={onNumberClick}
            />
          )}
        </div>
      </div>
      <div className="timer">Time Remaining: {remainingSeconds}</div>
    </div>
  );
};

const StarMatch = () => {
  const [gameId, setGameId] = useState(1)
  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />
}

// Color Theme
const colors = {
  available: 'lightgray',
  used: 'lightgreen',
  invalid: 'lightcoral',
  selected: 'deepskyblue',
};

// Math science
const utils = {
  // Sum an array
  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),

  // create an array of numbers between min and max (edges included)
  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),

  // pick a random number between min and max (edges included)
  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),

  // Given an array of numbers and a max...
  // Pick a random sum (< max) from the set of all available sums in arr
  randomSumIn: (arr, max) => {
    const sets = [[]];
    const sums = [];
    for (let i = 0; i < arr.length; i++) {
      for (let j = 0, len = sets.length; j < len; j++) {
        const candidateSet = sets[j].concat(arr[i]);
        const candidateSum = utils.sum(candidateSet);
        if (candidateSum <= max) {
          sets.push(candidateSet);
          sums.push(candidateSum);
        }
      }
    }
    return sums[utils.random(0, sums.length - 1)];
  },
};

ReactDOM.render(<StarMatch />, mountNode);
